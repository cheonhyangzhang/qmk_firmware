# Create a dictionary with the mapping
replacement_map = {
    'MO(_BOOT),': '&none',
    'KC_NO,': '&none',
    'KC_A,': '&kp A',
    'KC_B,': '&kp B',
    'KC_C,': '&kp C',
    'KC_D,': '&kp D',
    'KC_E,': '&kp E',
    'KC_F,': '&kp F',
    'KC_G,': '&kp G',
    'KC_H,': '&kp H',
    'KC_I,': '&kp I',
    'KC_J,': '&kp J',
    'KC_K,': '&kp K',
    'KC_L,': '&kp L',
    'KC_M,': '&kp M',
    'KC_N,': '&kp N',
    'KC_O,': '&kp O',
    'KC_P,': '&kp P',
    'KC_Q,': '&kp Q',
    'KC_R,': '&kp R',
    'KC_S,': '&kp S',
    'KC_T,': '&kp T',
    'KC_U,': '&kp U',
    'KC_V,': '&kp V',
    'KC_W,': '&kp W',
    'KC_X,': '&kp X',
    'KC_Y,': '&kp Y',
    'KC_Z,': '&kp Z',
    'LALT_T(KC_S),': '&ht_hp LALT S',
    'LGUI_T(KC_D),': '&ht_hp LGUI D',
    'LCTL_T(KC_F),': '&ht_hp LCTRL F',
    'LCTL_T(KC_J),': '&ht_hp LCTRL J',
    'LGUI_T(KC_K),': '&ht_hp LGUI K',
    'LALT_T(KC_L),': '&ht_hp LALT L',
    'KC_CAPS_LOCK,': '&kp CAPS',
    'KC_RSFT,': '&kp RSHIFT',
    'KC_COMM,': '&kp COMMA',
    'KC_QUOT,': '&kp SQT',
    'MO(_NUM),': '&none &mo NUM_L',
    'KC_LSFT,': '&kp LSHFT',
    'MO(_CMD),': '&mo CMD_L',
    'KC_SPC,': '&kp SPACE',
    'MO(_NAV),': '&mo NAV_L',
    'KC_NO': '&none &mo BLUE_L',
    'LCTL(LGUI(KC_Q)),': '&kp LC(LG(Q))',
    'LSFT(LGUI(KC_Z)),': '&kp LG(LS(Z))',
    'LGUI(KC_W),': '&kp LG(W)',
    'LGUI(KC_R),': '&kp LG(R)',
    'LGUI(KC_T),': '&kp LG(T)',
    'KC_CIRC,': '&kp CARET',
    'KC_AMPR,': '&kp AMPS',
    'KC_LPRN,': '&kp LPAR',
    'KC_RPRN,': '&kp RPAR',
    'LGUI(KC_TAB),': '&kp LG(TAB)',
    'LGUI(KC_A),': '&kp LG(A)',
    'KC_TAB,': '&kp TAB',
    'TO(_BASE),': '&to BAS_L',
    'KC_ESC,': '&kp ESC',
    'LGUI(KC_F),': '&kp LG(F)',
    'KC_ASTR,': '&kp ASTRK',
    'KC_BSPC,': '&kp BSPC',
    'LCTL(KC_X),': '&kp LC(X)',
    'KC_MINUS,': '&kp MINUS',
    'KC_COLN,': '&kp COLON',
    'LSFT(KC_TAB),': '&kp LS(TAB)',
    'LGUI(KC_Z),': '&kp LG(Z)',
    'LGUI(KC_X),': '&kp LG(X)',
    'LCTL(KC_C),': '&kp LC(C)',
    'LGUI(KC_C),': '&kp LG(C)',
    'LGUI(KC_V),': '&kp LG(V)',
    'LALT(LGUI(KC_V)),': '&kp LA(LG(V))',
    'KC_LBRC,': '&kp LBKT',
    'KC_RBRC,': '&kp RBKT',
    'LSFT(KC_MINUS),': '&kp UNDER',
    'KC_SCLN,': '&kp SEMI',
    'KC_ENT,': '&kp ENTER',
    'MO(_NAV),': '&mo NAV_L',
    'KC_LCBR,': '&kp LBRC',
    'KC_RCBR,': '&kp RBRC',
    'LGUI(KC_GRV),': '&kp LG(GRAVE)',
    'KC_UP,': '&kp UP',
    'KC_EQUAL,': '&kp EQUAL',
    'LSFT(LCTL(KC_TAB)),': '&kp LS(LC(TAB))',
    'LCTL(KC_TAB),': '&kp LC(TAB)',
    'KC_DLR,': '&kp DOLLAR',
    'KC_PERC,': '&kp PRCNT',
    'LSFT(LGUI(KC_C)),': '&kp LS(LG(C))',
    'KC_LEFT,': '&kp LEFT',
    'KC_DOWN,': '&kp DOWN',
    'KC_RGHT,': '&kp RIGHT',
    'KC_RIGHT,': '&kp RIGHT',
    'LGUI(KC_Y),': '&kp LG(Y)',
    'LGUI(KC_BSPC),': '&kp LG(BSPC)',
    'LGUI(LSFT(KC_T)),': '&kp LG(LS(T))',
    'KC_EXLM,': '&kp EXCL',
    'KC_AT,': '&kp AT',
    'KC_HASH,': '&kp HASH',
    'KC_TILD,': '&kp TILDE',
    'KC_GRV,': '&kp GRAVE',
    'LSFT(LGUI(KC_N)),': '&kp LS(LG(N))',
    'KC_BSLS,': '&kp BSLH',
    'TO(_MOUSE),': '&none',
    'KC_SLASH,': '&kp SLASH',
    'TO(_ONEHAND),': '&to OH_L',
    'LGUI(LSFT(KC_5)),': '&kp LG(LS(N5))',
    'KC_0,': '&kp N0',
    'KC_1,': '&kp N1',
    'KC_2,': '&kp N2',
    'KC_3,': '&kp N3',
    'KC_4,': '&kp N4',
    'KC_5,': '&kp N5',
    'KC_6,': '&kp N6',
    'KC_7,': '&kp N7',
    'KC_8,': '&kp N8',
    'KC_9,': '&kp N9',
    'LGUI(KC_LBRC),': '&kp LG(BSPC)',
    'LCTL(LGUI(LSFT(KC_4))),': '&kp LC(LG(LS(N4)))',
    'LGUI(KC_RBRC),': '&kp LG(RBKT)',
    'LSFT(LGUI(KC_G)),': '&kp LS(LG(G))',
    'KC_PGUP,': '&kp PG_UP',
    'KC_DOT,': '&kp DOT',
    'KC_KB_MUTE,': '&kp K_MUTE',
    'KC_KB_VOLUME_UP,': '&kp K_VOLUME_UP',
    'KC_KB_VOLUME_DOWN,': '&kp K_VOLUME_DOWN',
    'LGUI(LSFT(KC_4)),': '&kp LG(LS(N4))',
    'KC_PGDN,': '&kp PG_DN',
    'LSFT(KC_ENT),': '&kp LS(ENTER)',
    'LSFT(LALT(KC_Z)),': '&kp LS(LA(Z))',
    'LALT(LSFT(KC_L)),': '&kp LA(LS(L))',
    'LALT(LSFT(KC_H)),': '&kp LA(LS(H))',
    'LGUI(KC_U),': '&kp LG(U)',
    'LGUI(KC_I),': '&kp LG(I)',
    'LGUI(KC_O),': '&kp LG(O)',
    'LSFT(LALT(KC_M)),': '&kp LA(LS(M))',
    'LCTL(KC_1),': '&kp LC(N1)',
    'LCTL(KC_2),': '&kp LC(N2)',
    'LCTL(KC_3),': '&kp LC(N3)',
    'LCTL(KC_4),': '&kp LC(N4)',
    'LALT(LSFT(KC_SPC)),': '&kp LA(LS(SPACE))',
    'LALT(LSFT(KC_J)),': '&kp LA(LS(J))',
    'LALT(LSFT(KC_ENT)),': '&kp LA(LS(ENTER))',
    'LALT(LSFT(KC_K)),': '&kp LA(LS(K))',
    'LSFT(LALT(KC_M)),': '&kp LS(LA(M))',
    'LCTL(LSFT(LALT(KC_1))),': '&kp LC(LS(LA(N1)))',
    'LCTL(LSFT(LALT(KC_2))),': '&kp LC(LS(LA(N2)))',
    'LCTL(LSFT(LALT(KC_3))),': '&kp LC(LS(LA(N3)))',
    'LCTL(LSFT(LALT(KC_4))),': '&kp LC(LS(LA(N4)))',
    'LALT(LSFT(KC_T)),': '&kp LA(LS(T))',
    'KC_TRNS,': '&trans',
    '': '',
    '': '',
    '': '',
}

# Function to perform replacements in the file
def replace_keycodes(input_file, output_file, replacement_map):
    # Open the input file for reading
    with open(input_file, 'r') as file:
        file_data = file.read()

    # Perform the replacements
    for key, value in replacement_map.items():
        file_data = file_data.replace(key, value)

    # Write the result to the output file
    with open(output_file, 'w') as file:
        file.write(file_data)

# Example usage
input_file = 'qmkkeymapcore'  # Your input file
output_file = 'zmkkeymapcore'  # Your output file

replace_keycodes(input_file, output_file, replacement_map)
