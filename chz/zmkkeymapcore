#ifdef CONSOLE_ENABLE
#include "print.h"
#endif

#include QMK_KEYBOARD_H

#include <stdio.h>
enum layer_names {
    _BASE,
    _MOUSE,
    _ONEHAND,
    _CMD,
    _NAV,
    _NUM,
    _WIN,
    _BOOT,
};

// basic key mappings
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] =
{
  [_BASE] = LAYOUT_split_3x6_3(
    &none      &none  &kp W           &kp E         &kp R         &kp T       &kp Y   &kp U          &kp I         &kp O           &none     &none
    &kp Q           &kp A   &ht_hp LALT S   &ht_hp LGUI D &ht_hp LCTRL F &kp G       &kp H   &ht_hp LCTRL J  &ht_hp LGUI K &ht_hp LALT L   &kp P      &kp RSHIFT
    &kp CAPS   &kp Z   &kp X           &kp C         &kp V         &kp B       &kp N   &kp M          &kp COMMA      &kp DOT         &kp SQT   &none
                                            &none &mo NUM_L     &kp LSHFT      &mo CMD_L   &kp SPACE &mo NAV_L      &none &mo BLUE_L
  ),
  [_MOUSE] = LAYOUT_split_3x6_3(
      &none    &none    &none    &none    &none    &none       &none             &none          &none      &none          &none      &none
      &none    &none    KC_LALT,  KC_LGUI,  KC_LCTL,  &none       KC_MS_WH_DOWN,     KC_MS_WH_RIGHT, KC_MS_UP,   KC_MS_WH_LEFT,  &none      &none
      &none    &none    &none    &none    &none    &none       KC_MS_WH_UP,       KC_MS_LEFT,     KC_MS_DOWN, KC_MS_RIGHT,    KC_MS_BTN2, &kp SPACE
                                    &trans  &trans  &trans     KC_MS_BTN1,        &trans        &none &mo BLUE_L
  ),
  [_ONEHAND] = LAYOUT_split_3x6_3(
    &none &none &none    &none &none &none &none &none      &none      &none      &none          &none
    &none &none &none    &none &none &none &none &kp LG(U) &kp UP      &kp LG(O) &none          &none
    &none &none &none    &none &none &none &none &kp LEFT    &kp DOWN    &kp RIGHT   &kp LG(BSPC)  &none
    &none &none &trans &kp SPACE &trans &none &mo BLUE_L
  ),

  [_CMD] = LAYOUT_split_3x6_3(
    &kp LC(LG(Q))   &none        &kp LG(LS(Z))   &kp LG(W)   &kp LG(R)     &kp LG(T)     &kp CARET            &kp AMPS      &kp LPAR            &kp RPAR        &none    &none
    &kp LG(TAB)       &kp LG(A)   &kp TAB             &to BAS_L    &kp ESC         &kp LG(F)     &kp ASTRK            &kp BSPC      &kp LC(X)         &kp MINUS       &kp COLON  &kp RSHIFT
    &kp LS(TAB)       &kp LG(Z)   &kp LG(X)         &kp LC(C)   &kp LG(C)     &kp LG(V)     &kp LA(LG(V))   &kp LBKT      &kp RBKT            &kp UNDER &kp SEMI  &none
                                                          &none        &none          &none          &kp ENTER             &mo NAV_L     &none &mo BLUE_L
  ),
  [_NAV] = LAYOUT_split_3x6_3(
     &none             &none          &none              &kp LS(LC(TAB)) &kp LC(TAB)   &none      &kp LG(GRAVE)       &none      &kp UP      &kp EQUAL     &none      &none
     &none             &kp EXCL        &kp AT              &kp HASH        &kp DOLLAR     &kp PRCNT    &kp LS(LG(C))   &kp LEFT    &kp DOWN    &kp RIGHT      &kp LG(Y) &kp LG(BSPC)
     &kp LG(LS(T))  &none          &kp LBRC            &kp RBRC        &kp TILDE    &kp GRAVE     &kp LS(LG(N))   &kp BSLH    &none &kp SLASH     &none      &to OH_L
                                                            &none          &kp LSHFT    &mo CMD_L   &none              &none      &none &mo BLUE_L
  ),
  [_NUM] = LAYOUT_split_3x6_3(
      &kp LG(BSPC)  &none    &none          &kp LG(LS(N5))         &none          &none              &none          &kp N7 &kp N8   &kp N9 &none   &kp K_MUTE
      &none  &none    &kp LG(BSPC)  &kp LC(LG(LS(N4)))   &kp LG(RBKT)  &kp LS(LG(G))   &kp PG_UP        &kp N4 &kp N5   &kp N6 &kp DOT  &kp K_VOLUME_UP
      &none  &none    &none          &kp LG(LS(N4))         &none          &none              &kp PG_DN        &kp N1 &kp N2   &kp N3 &none   &kp K_VOLUME_DOWN
                                        &none                    &none          &none              &kp LS(ENTER)   &kp N0 &none &mo BLUE_L
  ),
  [_WIN] = LAYOUT_split_3x6_3(
      &kp LS(LA(Z))     &none                  &none                  &kp LA(LS(L))       &kp LA(LS(H))       &none                  &none          &kp LG(U)         &kp LG(I)         &kp LG(O)         &none  &none
      &kp LS(LA(M))     &kp LC(N1)             &kp LC(N2)             &kp LC(N3)             &kp LC(N4)             &kp LA(LS(SPACE))     &none          &kp LA(LS(J))   &kp LA(LS(ENTER)) &kp LA(LS(K))   &none  &kp LS(LA(M))
      &none                &kp LC(LS(LA(N1))) &kp LC(LS(LA(N2))) &kp LC(LS(LA(N3))) &kp LC(LS(LA(N4))) &kp LA(LS(T))       &none          &none              &none              &none              &none  &none
                                                                            &none                  &none                  &none                  &none          &none              &none &mo BLUE_L
  ),
  [_BOOT] = LAYOUT_split_3x6_3(
    &none &none &none &none &none &none &none &none     &none      &none &none &none
    &none &none &none &none &none &none &none &none &none &none &none &none
    &none &none &none &none &none &none &none &none &none &none &none &none
    QK_BOOT, &none &none &none &none QK_BOOT
  ),
};

/*
// this is to help print out the key pressed to generate heat map data
bool process_record_user(uint16_t keycode, keyrecord_t *record) {
    #ifdef CONSOLE_ENABLE
        const bool is_combo = record->event.type == COMBO_EVENT;
        uprintf("0x%04X,%u,%u,%u,%b,0x%02X,0x%02X,%u\n",
             keycode,
             is_combo ? 254 : record->event.key.row,
             is_combo ? 254 : record->event.key.col,
             get_highest_layer(layer_state),
             record->event.pressed,
             get_mods(),
             get_oneshot_mods(),
             record->tap.count
             );
    #endif
    switch (keycode) {
    //...
    }
    return true;
}
*/

layer_state_t layer_state_set_user(layer_state_t state) {
    state = update_tri_layer_state(state, _CMD, _NAV, _WIN);
    return state;
}
